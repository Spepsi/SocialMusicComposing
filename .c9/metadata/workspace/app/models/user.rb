{"filter":false,"title":"user.rb","tooltip":"/app/models/user.rb","undoManager":{"mark":27,"position":27,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":31},"end":{"row":1,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1,"column":0},"end":{"row":1,"column":4},"action":"insert","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":1,"column":4},"end":{"row":2,"column":0},"action":"insert","lines":["",""]},{"start":{"row":2,"column":0},"end":{"row":2,"column":4},"action":"insert","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":4},"end":{"row":10,"column":3},"action":"insert","lines":["class User < ActiveRecord::Base","  before_save { self.email = email.downcase }","  validates :name, presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","end"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":12,"column":0},"action":"remove","lines":["class User < ActiveRecord::Base","    ","    class User < ActiveRecord::Base","  before_save { self.email = email.downcase }","  validates :name, presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","end","end",""]},{"start":{"row":0,"column":0},"end":{"row":8,"column":3},"action":"insert","lines":["class User < ActiveRecord::Base","  before_save { self.email = email.downcase }","  validates :name, presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","end"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":8,"column":3},"action":"remove","lines":["class User < ActiveRecord::Base","  before_save { self.email = email.downcase }","  validates :name, presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","end"]},{"start":{"row":0,"column":0},"end":{"row":9,"column":3},"action":"insert","lines":["class User < ActiveRecord::Base","  before_save { self.email = email.downcase }","  validates :name, presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, length: { minimum: 6 }","end"]}]}],[{"group":"doc","deltas":[{"start":{"row":8,"column":45},"end":{"row":9,"column":0},"action":"insert","lines":["",""]},{"start":{"row":9,"column":0},"end":{"row":9,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":9,"column":2},"end":{"row":10,"column":0},"action":"insert","lines":["",""]},{"start":{"row":10,"column":0},"end":{"row":10,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":10,"column":2},"end":{"row":14,"column":5},"action":"insert","lines":["  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":15,"column":3},"action":"remove","lines":["class User < ActiveRecord::Base","  before_save { self.email = email.downcase }","  validates :name, presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, length: { minimum: 6 }","  ","    def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","end"]},{"start":{"row":0,"column":0},"end":{"row":21,"column":3},"action":"insert","lines":["class User < ActiveRecord::Base","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, length: { minimum: 6 }","","  # Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def User.new_token","    SecureRandom.urlsafe_base64","  end","end"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":21,"column":3},"action":"remove","lines":["class User < ActiveRecord::Base","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, length: { minimum: 6 }","","  # Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def User.new_token","    SecureRandom.urlsafe_base64","  end","end"]},{"start":{"row":0,"column":0},"end":{"row":28,"column":3},"action":"insert","lines":["class User < ActiveRecord::Base","  attr_accessor :remember_token","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, length: { minimum: 6 }","","  # Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def User.new_token","    SecureRandom.urlsafe_base64","  end","","  # Remembers a user in the database for use in persistent sessions.","  def remember","    self.remember_token = User.new_token","    update_attribute(:remember_digest, User.digest(remember_token))","  end","end"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":28,"column":3},"action":"remove","lines":["class User < ActiveRecord::Base","  attr_accessor :remember_token","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, length: { minimum: 6 }","","  # Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def User.new_token","    SecureRandom.urlsafe_base64","  end","","  # Remembers a user in the database for use in persistent sessions.","  def remember","    self.remember_token = User.new_token","    update_attribute(:remember_digest, User.digest(remember_token))","  end","end"]},{"start":{"row":0,"column":0},"end":{"row":33,"column":3},"action":"insert","lines":["class User < ActiveRecord::Base","  attr_accessor :remember_token","  before_save { self.email = email.downcase }","  validates :name,  presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, length: { minimum: 6 }","","  # Returns the hash digest of the given string.","  def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  # Returns a random token.","  def User.new_token","    SecureRandom.urlsafe_base64","  end","","  # Remembers a user in the database for use in persistent sessions.","  def remember","    self.remember_token = User.new_token","    update_attribute(:remember_digest, User.digest(remember_token))","  end","","  # Returns true if the given token matches the digest.","  def authenticated?(remember_token)","    BCrypt::Password.new(remember_digest).is_password?(remember_token)","  end","end"]}]}],[{"group":"doc","deltas":[{"start":{"row":1,"column":31},"end":{"row":1,"column":32},"action":"insert","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":1,"column":32},"end":{"row":1,"column":33},"action":"insert","lines":[":"]}]}],[{"group":"doc","deltas":[{"start":{"row":1,"column":33},"end":{"row":1,"column":34},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":1,"column":34},"end":{"row":1,"column":35},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":1,"column":35},"end":{"row":1,"column":36},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":1,"column":36},"end":{"row":1,"column":37},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":1,"column":37},"end":{"row":1,"column":38},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":1,"column":38},"end":{"row":1,"column":39},"action":"insert","lines":["b"]}]}],[{"group":"doc","deltas":[{"start":{"row":1,"column":39},"end":{"row":1,"column":40},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":1,"column":40},"end":{"row":1,"column":41},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":1,"column":41},"end":{"row":1,"column":42},"action":"insert","lines":["_"]}]}],[{"group":"doc","deltas":[{"start":{"row":1,"column":33},"end":{"row":1,"column":42},"action":"remove","lines":["remember_"]},{"start":{"row":1,"column":33},"end":{"row":1,"column":48},"action":"insert","lines":["remember_digest"]}]}],[{"group":"doc","deltas":[{"start":{"row":1,"column":31},"end":{"row":1,"column":48},"action":"remove","lines":[",:remember_digest"]}]}],[{"group":"doc","deltas":[{"start":{"row":32,"column":5},"end":{"row":33,"column":0},"action":"insert","lines":["",""]},{"start":{"row":33,"column":0},"end":{"row":33,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":33,"column":2},"end":{"row":35,"column":5},"action":"insert","lines":["  def forget","    update_attribute(:remember_digest, nil)","  end"]}]}],[{"group":"doc","deltas":[{"start":{"row":30,"column":36},"end":{"row":31,"column":0},"action":"insert","lines":["",""]},{"start":{"row":31,"column":0},"end":{"row":31,"column":6},"action":"insert","lines":["      "]}]}],[{"group":"doc","deltas":[{"start":{"row":31,"column":6},"end":{"row":31,"column":42},"action":"insert","lines":["return false if remember_digest.nil?"]}]}]]},"ace":{"folds":[],"scrolltop":316,"scrollleft":0,"selection":{"start":{"row":31,"column":42},"end":{"row":31,"column":42},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1419181796262,"hash":"e151e1129826950168a345887e7c2b5398d43383"}